Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система контролю успішності студентів музичних шкіл (MusicSchool)

Студент гр. ПЗПІ-21-1  	__________________ Нех Т.В.
(підпис)

Керівник роботи 			___________________ доц. Лещинський В.О.
(підпис)
    Роботу захищено «__»_________2024 р.
    з оцінкою _________________________

Комісія: 				___________________ доц. Лещинський В.О.
(підпис)	
___________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)

Харків
2024 р.
Харківський національний університет радіоелектроніки 


Факультет комп’ютерних наук      .Кафедра програмної інженерії              .
Спеціальність 121-Інженерія програмного забезпечення                              .
Курс 3              Семестр _________________6_________________________ 
Дисципліна Архітектура програмного забезпечення_______________ 

ЗАВДАННЯ 
НА КУРСОВУ РОБОТУ СТУДЕНТОВІ 
                                        Неху Тарасу Віталійовичу                                             .
1. Тема проєкту: «Програмна система контролю успішності студентів музичних шкіл (MusicSchool)»                                                                           . 
2. Термін узгодження завдання з лабораторних робіт «14» квітня  2024 р. 
3. Термін здачі завдання з лабораторних робіт «08»  травня   2024 р. 
4. Вихідні дані до проєкту: В програмній системі передбачити: додавання та редагування користувача, студента, навчального предмету, оцінок, формування статистики успішності учнів,                                                                                    ..
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): вступ, аналіз предметної області, постановка задачі, проектування                   .
програмного проекту, структура бази даних, кодування програмного                  .
проекту, опис розробленої програмної системи, висновки, перелік посилань,           .      
додатки                                                                                                                            .
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси): Deployment Diagram, Use Case Diagram, ER-модель даних, Package Diagram, Interaction Overview Diagram, Activity Diagram, інтерфейс головної сторінки                          .

КАЛЕНДАРНИЙ ПЛАН


№	Основні етапи виконання проєкту в рамках лабораторних робіт	Термін виконання етапів	Примітка
1	Функціональна специфікація
програмного проекту	10.04.24 – 4.04.24	виконано
2	Проектування програмного
проекту	15.04.24 –30.04.24	виконано
3	Кодування програмного проекту	01.05.24 –20.05.24	виконано
4	Оформлення пояснювальної
записки	21.05.24 –31.05.24	виконано
5	Захист курсової роботи		

Дата видачі теми проєкту «14» квітня 2024 р. 

Керівник 					_____________ доц. Лещинський В.О.
(підпис)
Завдання прийняв до виконання 
ст. гр. ПЗПІ-21-1 						_____________	 Нех Т.В.
								(підпис)



РЕФЕРАТ


Пояснювальна записка до курсової роботи: 48 с., 6 рис., 8 додатків, джерела. 
УСПІШНІСТЬ УЧНІВ, ОЦІНЮВАННЯ, НАВЧАННЯ, НАВЧАЛЬНИЙ ЗАКЛАД, СТАТИСТИКА, ПРОГРАМНЕ ЗАБЕЗПЕЧЕННЯ.
Об’єктом дослідження є спостереження та збір інформації про успішність школярів музичної школи. Відкритими питаннями наразі є створення надійної та зручної системи для моніторингу оцінок студентів з навчальних предметів за певний термін.
Метою курсової роботи є розробка програмної системи, яка забезпечить можливість відслідковувати інформацію про успішність школярів музичної школи з різних груп. Ця система дозволить підвищити рівень обізнаності студентів, вчителів та батьків про ситуацію з успішністю.
Методи розробки базуються на використанні середи розробки Microsoft Visual Studio 2022. За допомогою технологій ASP.NET, Razor Pages, Dapper. У якості технології для збереження даних, було обрано СУБД MSSQL. 
У результаті роботи здійснено програмну реалізацію системи для моніторингу інформації про успішність учнів музичної школи з різних навчальних предметів. Програмна система складається з веб-додатку, сервера, мобільного додатку та смарт-пристрою.

ЗМІСТ


Вступ................................................................................................................	7
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ.........................................…..………	8
   1.1 Загальний огляд предметної області...................................................	8
   1.2 Аналіз існуючих аналогів.………………………………..…….….....	9
2 ПОСТАНОВКА ЗАВДАННЯ.....................................................................	10
   2.1 Затвердження бачення програмної системи........................................	10
   2.2 Користувачі системи та потреби цільового ринку..............................	10
   2.3 Припущення та залежності...................................................................	11
   2.4 Основний функціонал та сценарії використання системи.................	12
   2.5 Ризики програмної системи..................................................................	13
   2.6 Обмеження та винятки .........................................................................	13
   2.7 Вимоги до програмної системи та стек технологій............................	14
3 АРХІТЕКТУРА Й ПРОЄКТУВАННЯ СИСТЕМИ...................................	17
   3.1 UML-моделювання................................................................................	17
   3.2 Проєктування бази даних......................................................................	17
   3.3 Загальна архітектура програмної системи...........................................	18
   3.4 Архітектура серверної частини............................................................	18
4 ОПИС ПРОГРАМНИХ РІШЕНЬ...............................................................	19
   4.1 Програмні рішення серверного застосунку.........................................	19
      4.1.1 Робота з базою даних.......................................................................	19
      4.1.2 Автентифікація................................................................................	19
      4.1.3 Специфікація MVC..................................................................	20
      4.1.4 Валідація на сервері.........................................................................	20
      4.1.5 Локалізація.......................................................................................	21
      4.1.6 Використання механізму Dependency Injection.............................	21
      4.1.7 Забезпечення безпеки даних...........................................................	22
ВИСНОВКИ....................................................................................................	23
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ..............................................................	24
ДОДАТОК А UML-діаграма прецедентів...................................................	25
ДОДАТОК Б UML-діаграма розгортання....................................................	26
ДОДАТОК В ER-діаграма.............................................................................	27
ДОДАТОК Г UML-діаграма пакетів............................................................	28
ДОДАТОК Д Скрипти свторення бази даних..............................................	29
ДОДАТОК Е Код AuthService.......................................................................	31
ДОДАТОК Є Код Grades.CreateModel.........................................................	33
ДОДАТОК Ж Перевірка на плагіат…..........................................................	35


ВСТУП


Останнім часом багато музичних шкіл перейшли на дистанційне навчання, однак поступово повертаються до традиційного формату, де студенти зможуть брати участь у заняттях, створювати музичні гурти та займатися творчістю безпосередньо в приміщеннях шкіл. Для того, щоб забезпечити комфортне навчання та зручність як для студентів, так і для викладачів, необхідно впровадити сучасні технологічні рішення, які дозволять ефективно організувати навчальний процес та комунікацію.
Метою даної курсової роботи є розробка програмної системи для контролю успішності студентів музичних шкіл (MusicSchool). При створенні цієї системи враховуються основні принципи проектування архітектури програмного забезпечення, використання архітектурних патернів та стилів, а також методики побудови архітектури. Проект охоплює проектування різних шарів системи, включаючи шар представлення, бізнес-логіку, доступ до даних і сервіси.
Результатом роботи стане функціональна система, яка дозволить студентам і викладачам музичних шкіл ефективно взаємодіяти, відслідковувати успішність, організовувати заняття та інші заходи. Система також включатиме функціонал для формування статистики і порівняння успішності учнів.
Для досягнення мети проведено дослідження архітектур програмного забезпечення, принципів «чистого» коду, а також аналіз потреб та специфіки музичних шкіл. Було спроектовано систему та базу даних, забезпечено програмну реалізацію з урахуванням вимог «чистого» коду та принципів «чистої» архітектури.
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Загальний огляд предметної області


Можна помітити, що багато музичних шкіл адаптувалися до дистанційного навчання через повномасштабне вторгнення. Проте, з поверненням до традиційного формату навчання виникла потреба в модернізації управління такими закладами. Особливо важливо забезпечити зручну та ефективний моніторинг оцінок та успішності студентів з багатьох предметів.
На жаль, більшість музичних шкіл не мають належних систем для контролю оцінок та відвідувань школярів. Виходячи з цього, можна визначити кілька ключових аспектів предметної області:
–	Відстеження відвідуваності музичних шкіл,
–	Контроль якості надання навчальних послуг,
–	Моніторинг успішності студентів.
Це покращить управління музичними школами та створить комфортні умови для навчання й взаємодії між студентами та викладачами.
Система контролю успішності студентів музичних шкіл (MusicSchool) повинна забезпечувати:
–	Збір інформації про оцінки учнів,
–	Формування статистики успішності у зручному вигляді,
Метою системи є покращення комунікації в музичних школах і створення більш зручних умов для навчання, як для вчителів, так і для студентів. 
Система MusicSchool призначена для музичних шкіл, які прагнуть забезпечити своїм студентам та працівникам можливість максимально розкрити свій потенціал та демонструвати свої таланти.

1.2	Аналіз аналогів системи


На ринку вже існують системи контролю успішності студентів, які дозволяють відстежувати їхні академічні досягнення. Наприклад, системи на зразок Google Classroom та Microsoft Teams використовуються для управління завданнями, оцінювання робіт та надання зворотного зв'язку студентам. Проте, ці платформи орієнтовані на загальні освітні потреби та не враховують специфіку музичних шкіл.
Наше рішення, система MusicSchool, має низку унікальних переваг, оскільки вона спеціально розроблена для контролю успішності студентів музичних шкіл. Основні функції системи включають:
–	Відстеження оцінок студентів за музичними предметами, включаючи теорію музики, інструментальне виконання, сольфеджіо та інші дисципліни,
–	Формування детальних звітів та статистики для порівняння успішності студентів у різні періоди часу,
–	Зручна комунікація між викладачами та студентами, включаючи обговорення прогресу та рекомендації для подальшого навчання,
–	User-Friendly інтерфейс.
Адміністрація музичних шкіл може налаштувати систему для своїх потреб, включаючи створення облікових записів для студентів, викладачів та інших працівників.
Ми маємо намір надавати користувачам безкоштовний доступ до системи MusicSchool. Додатково ми розглядаємо можливість монетизації через інтеграцію рекламних матеріалів, узгоджених з адміністрацією шкіл, а також через проведення платних майстер-класів або спеціальних заходів. Основною метою проекту є створення зручного та ефективного інструменту для підтримки навчального процесу, що дозволить студентам музичних шкіл розкрити свій творчий потенціал і досягти високих результатів у навчанні.
2	ПОСТАНОВКА ЗАВДАННЯ
2.1	Затвердження бачення програмної системи.


Програмна система MusicSchool буде забезпечувати контроль успішності студентів музичних шкіл. Вона надаватиме можливість відстежувати оцінки студентів за різними музичними предметами та періодами часу, а також створювати детальні статистичні звіти з порівнянням їхніх результатів.
Кожен студент зможе переглядати свою успішність, включаючи оцінки та коментарі від викладачів. Викладачі, у свою чергу, матимуть доступ до історії оцінок своїх студентів, що дозволить їм аналізувати прогрес та адаптувати навчальні плани відповідно до індивідуальних потреб кожного студента.
Адміністрація школи, включаючи директорів, матиме можливість керувати обліковими записами користувачів, переглядати загальну статистику успішності та відвідуваності, а також редагувати та реагувати на пропозиції щодо покращення навчального процесу. Це допоможе забезпечити більш ефективне управління навчальним процесом та підвищити якість освіти в музичних школах.


2.2	Користувачі системи та потреби цільового ринку


Система MusicSchool призначена для різних категорій користувачів, включаючи студентів та працівників музичних шкіл. Для кожної групи передбачено окремий функціонал, що відповідає їхнім потребам.
Для викладачів та адміністрації:
–	Редагування та перегляд інформації про студентів.
–	Редагування та перегляд інформації про навчальні предмети.
–	Формування статистики успішності учнів у вигляді таблиці або діаграми.
Для студентів:
–	Отримання інформації про успішність з певних предметів та за певний період часу.
Наш продукт відрізняється від інших систем завдяки своєму інтегрованому мобільному додатку, розвиненій системі безпеки та можливостям для детального відстеження статистики успішності та відвідуваності. Це забезпечує користувачам максимальну зручність та ефективність у управлінні навчальним процесом.


2.3	Припущення та залежності


На початковому етапі проєктування та реалізації системи MusicSchool важливо сформулювати основні припущення та залежності, які можуть вплинути на успішність проєкту.
Припущення:
–	Попит на покращення: Існує значний попит серед музичних шкіл на покращення умов навчання, зокрема на впровадження нових технологій для моніторингу успішності студентів.
–	Технічна реалізація: Припускається, що технічна реалізація системи буде успішною, а її функціонал – надійним і безпечним.
–	Зацікавленість держапарату: Система MusicSchool зможе привернути увагу державних органів та закладів освіти, зацікавлених у підвищенні якості навчання.
–	Доступ до Інтернету: Користувачі матимуть доступ до Інтернету для взаємодії із системою.
–	Мобільна грамотність: Користувачі вміють користуватися мобільними пристроями, завантажувати та встановлювати додатки.
Залежності:
–	Технологічна реалізація: Проєкт залежить від успішної реалізації програмного забезпечення для роботи системи, зокрема для забезпечення точного збору даних про оцінки та успішність студентів.
–	Партнерські угоди: Розвиток проєкту може значною мірою залежати від укладення партнерських угод з державними органами, благодійними організаціями та освітніми установами, що забезпечать фінансову та матеріальну підтримку.
–	Технічна підтримка: Необхідність у постійній технічній підтримці для своєчасного вирішення можливих проблем та відмов у роботі системи.
–	Необхідні ресурси: Залежність від наявності необхідних ресурсів, таких як сервери, технічне обладнання та програмне забезпечення для належного функціонування системи.
–	Інтернет-доступ у закладах: Наявність стабільного доступу до Інтернету в музичних школах для забезпечення безперебійної роботи системи.
Ці припущення та залежності визначають основні фактори, які можуть вплинути на успішну реалізацію та використання системи MusicSchool.


2.4	Основний функціонал та сценарії використання системи


На основі аналізу потреб користувачів системи MusicSchool, було визначено ключові функції, які повинні бути реалізовані в першій версії:
–	Реєстрація та оцінювання успішності: Запис оцінок студентів за різними предметами, формування звітів про успішність.
–	Створення оголошень: Можливість для викладачів і адміністрації створювати оголошення про зміни в розкладі, заходи або інші важливі події.
–	Запити на бронювання приміщень: Функціонал для бронювання приміщень, таких як аудиторії для додаткових занять, репетицій або проведення заходів.
–	Перегляд та редагування навчальних предметів та оцінок: Можливість перегляду та внесення змін до предметів та оцінок.
–	Перегляд статистики успішності: Доступ до статистики успішності студентів, що дозволяє відстежувати їхній прогрес.
–	Захист персональних даних: Забезпечення безпеки та конфіденційності персональних даних користувачів.
–	Багатомовна підтримка: Можливість вибору між українською та англійською мовами інтерфейсу системи, що забезпечує зручність використання для різних груп користувачів.
Цей функціонал забезпечує всебічну підтримку навчального процесу, роблячи його більш ефективним та зручним як для студентів, так і для викладачів.


2.5	Ризики програмної системи


Під час розробки та впровадження системи MusicSchool необхідно враховувати можливі ризики, які можуть вплинути на її ефективність та безпеку.
–	Технічні проблеми: Існує ймовірність виникнення технічних проблем або збоїв у роботі програмного забезпечення чи обладнання, такого як сенсори для моніторингу успішності студентів. Для мінімізації цього ризику слід провести ретельне тестування всіх компонентів системи та забезпечити їхню надійність.
–	Конкуренція на ринку: Система MusicSchool може зіткнутися з конкуренцією з боку інших постачальників аналогічних послуг. Для того щоб залишатися конкурентоспроможними, необхідно постійно вдосконалювати функціонал системи, впроваджувати унікальні можливості та пропонувати акційні пропозиції для залучення нових користувачів.
Ці ризики потребують ретельного планування та впровадження відповідних заходів для їхнього пом'якшення, що забезпечить успішне функціонування системи MusicSchool.


2.6	Обмеження та винятки


У процесі розробки системи MusicSchool передбачено деякі обмеження та виключення:
– Обмеження функціоналу: У першій версії системи буде реалізовано лише основні функції, зосереджені на моніторингу успішності студентів і комунікації між учасниками освітнього процесу. Додаткові функції можуть бути додані в майбутніх оновленнях.
– Залежність від інфраструктури: Робота системи буде залежати від наявності стабільного підключення до Інтернету та електропостачання. Відсутність цих ресурсів може обмежити можливість використання системи.
Ці обмеження та виключення враховуються під час планування та розробки системи, щоб забезпечити її стабільну та ефективну роботу.


2.7 Вимоги до програмної системи та стек технологій


У першому запуску продукту MusicSchool будуть реалізовані лише основні функції, необхідні для успішного функціонування системи. Це включає:

– Адміністрування: Управління обліковими записами користувачів, налаштування прав доступу та конфігурація системних параметрів.
– Локалізація: Підтримка різних мовних інтерфейсів, зокрема української та англійської, для зручності користувачів.
– Захист персональних даних: Впровадження механізмів захисту конфіденційної інформації та забезпечення безпеки даних.
Серверна частина (Back-end) повинна забезпечувати виконання всіх необхідних функцій, включаючи:
– Обробка запитів: Прийом, обробка та відповідь на запити від користувачів через веб-інтерфейс або мобільний додаток.
– Управління даними: Зберігання, обробка та оновлення даних про студентів, викладачів, розклади занять та інші важливі елементи системи.
– Забезпечення безпеки: Реалізація протоколів аутентифікації та авторизації, шифрування даних та інших заходів для захисту інформації.
– Підтримка інтеграцій: Можливість інтеграції з іншими системами, що можуть бути використані в майбутньому для розширення функціоналу.
Ці функції забезпечать стабільну роботу системи, створюючи основу для подальшого розвитку та вдосконалення продукту.
Клієнтська частина (Front-end) системи MusicSchool використовується працівниками закладу для адміністрування системи. Для забезпечення зручності та ефективності використання, існує наступний перелік вимог до Front-end:
– Інтуїтивно зрозумілий інтерфейс: Користувацький інтерфейс повинен бути зручним і зрозумілим, щоб працівники могли легко знаходити необхідну інформацію та виконувати потрібні дії.
– Адаптивний дизайн: Інтерфейс має бути оптимізований для різних пристроїв, включаючи комп'ютери, планшети та мобільні телефони, щоб працівники могли використовувати систему з будь-якого пристрою.
– Панель адміністратора: Спеціальна панель для адміністративного персоналу, яка забезпечує доступ до управління обліковими записами, налаштуваннями системи, розкладом занять та іншими функціями.
– Система сповіщень: Інтеграція системи сповіщень для інформування працівників про важливі події, оновлення та зміни в системі.
– Захист даних: Забезпечення безпечного доступу до конфіденційної інформації через застосування засобів аутентифікації та авторизації.
Ці вимоги до клієнтської частини забезпечують зручність та ефективність управління системою MusicSchool працівниками закладу, створюючи умови для її ефективного використання.
Програмна система MusicSchool складається з кількох компонентів, кожен з яких відповідає за окремі функції та використовує сучасні технології:
–  Серверна частина: Розроблена на мові програмування C# з використанням платформи .NET Core 8 та ASP.NET Core. Сервер забезпечує роботу MVC для обміну даними між клієнтською частиною та базою даних.
–  База даних: Для зберігання даних використовується SQL Server, а система управління базами даних (СУБД) — Microsoft SQL Server Management Studio (MS SSMS). Це забезпечує надійне зберігання та обробку інформації.
–  Веб-клієнт: Виконаний за допомогою ASP.NET MVC Razor Pages, що дозволяє створити швидкий та динамічний інтерфейс для адміністрування системи та взаємодії користувачів.
– Цей стек технологій забезпечує кросплатформенність системи, що дозволяє використовувати її на різних пристроях і операційних системах, включаючи Windows, macOS, Linux, iOS та Android. Такий підхід гарантує широку доступність сервісу для користувачів та зручність його використання в будь-якому середовищі.

3	АРХІТЕКТУРА Й ПРОЄКТУВАННЯ СИСТЕМИ
3.1	UML-моделювання


Для моделювання поведінки системи MusicSchool та її окремих компонентів було використано мову UML (Unified Modeling Language). UML залишається стандартною нотацією для розробників, менеджерів проєктів, власників компаній та фахівців різних галузей, що дозволяє ефективно представляти структуру та поведінку системи.

У процесі проєктування було створено діаграму прецедентів (див. Додаток А), на якій виділено два ключові "актори":

Вчитель: Відповідає за виставлення оцінок, створення і редагування навчальних предметів. Може переглядати успішність учнів, а також отримувати статистику щодо їхнього навчального прогресу.
Студент: Має можливість переглядати свої оцінки, та отримувати інформацію про зміни в розкладі та організації навчального процесу.
Крім того, було змодельовано діаграму розгортання, яка допомагає зрозуміти, як фізичні компоненти системи розташовані та взаємодіють один з одним (див. Додаток Б).


3.2	Проєктування бази даних


База даних системи MusicSchool складається з 6 сутностей: Аккаунт, Студент, Вчитель, Клас, Навчальний предмет, Оцінка. Дані сутності пов’язані між собою зв’язками один-до-одного або один-до-багатьох. 
Для створення бази даних у системі MusicSchool було обрано метод Database First. Це означає, що база даних була спочатку спроектована і реалізована на основі ER-діаграми (див. Додаток В), а потім модель даних була інтегрована у програмний код.


3.3	Загальна архітектура програмної системи      


Загальна архітектура програмної системи MusicSchool базується на модульному підході та складається з кількох основних компонентів, що взаємодіють між собою. Архітектура передбачає розподіл системи на окремі частини для забезпечення масштабованості, гнучкості та ефективності.


3.4	Архітектура серверної частини


Серверна частина системи MusicSchool побудована на основі трьох-рівневої архітектури, яка забезпечує чіткий розподіл відповідальностей і підтримує масштабованість, гнучкість і підтримуваність коду. Архітектура складається з трьох основних рівнів: доступ до даних (DAL), бізнес-логіка (BLL) та API (презентаційний рівень).
Рівень DAL Рівень DAL відповідає за взаємодію з базою даних. 
Рівень BLL Рівень BLL реалізує основну логіку бізнесу та обробку даних. 
Рівень API Рівень API надає інтерфейс для взаємодії з системою через зовнішні запити. 
Для детального опису роботи між частинами серверного застосунку була створена діаграма пакетів, яка відображає структуру та взаємодію компонентів серверної частини (див. Додаток Г).
4	ОПИС ПРОГРАМНИХ РІШЕНЬ
4.1	Програмні рішення серверного застосунку
4.1.1	 Робота з базою даних


У якості системи управління базою даних було обрано MSSQL. Робота з базою даних легко інтегрується в .Net проєкт за допомогою технології  Dapper. 
Оскільки було обрано database-first метод створення БД, було написано скрипти для створення бази даних (див. Додаток Д).


4.1.2	 Автентифікація


Для реалізації авторизації та автентифікації в системі використовується JSON Web Token (JWT). Це дозволяє безпечно аутентифікувати користувачів і керувати доступом до ресурсів системи. Налаштування автентифікації було прописане в файлі Startup.cs: 
services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,

                    ValidIssuer = "https://localhost:44366",
                    ValidAudience = "https://localhost:44366",
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8
                    .GetBytes("superSecretKey@123"))
                };
            });
Логіка авторизація та створення Claims знаходиться в класі AuthService (див. Додаток Е)


4.1.3	 Специфікація MVC


Серверна частина реалізована за допомогою архітектурного патерну MVC, що дозволяє ефективно розділяти логіку програми на три взаємопов'язані компоненти: модель, представлення та контролер. Це забезпечує легкість підтримки, масштабованість та розширюваність системи. 
Приклад одної з моделей можна оглянути нижче (див. Додаток Є)


4.1.4	Валідація на сервері


Валідація даних у системі реалізована за допомогою атрибутів Entity Framework Core та ручної перевірки даних. Наприклад, під час створення акаунту використовуються атрибути для DTO-моделей, такі як Required та MinLength, що забезпечують обов'язковість заповнення полів і мінімальну довжину введених даних. Це дозволяє гарантувати цілісність і коректність даних на етапі їх введення та обробки.

public class Student
{
    public int StudentId { get; set; }
    [Required(ErrorMessage = "Name is required.")]
    public string StudentName { get; set; }
    [Required(ErrorMessage = "Class is required.")]
    public string Class { get; set; }
}
4.1.5	 Локалізація


Серверна частина системи відповідає за локалізацію, особливо щодо коректної обробки часу. З боку серверу обробка часу відбувається під час заповнення даних або при фіксації відвідування, якщо запит не містить інформації про час (значення null). Це забезпечує точність і узгодженість записів, незалежно від часових поясів користувачів.

Помилки відображаються англійською мовою, оскільки англійська є світовою мовою та використовується для розробки клієнтської частини.


4.1.6	 Використання механізму Dependency Injection


Для передачі залежностей у програмній системі використовується механізм Dependency Injection (DI). Цей підхід дозволяє зручно та гнучко керувати залежностями між різними компонентами програми. Приклад реалізації DI у системі:

builder.Services.AddSingelton<AuthService>();
builder.Services.AddScoped<GradeRepository>();
builder.Services.AddScoped<UserRepository>();
builder.Services.AddScoped<StudentRepository>();

У цьому коді наведені два підходи до впровадження залежностей:
AddSingleton: Створює один екземпляр сервісу, який використовується протягом усього життєвого циклу додатка. Це підходить для сервісів, які мають підтримувати стабільний стан або виконують ресурсозатратні ініціалізації.
AddScoped: Створює новий екземпляр сервісу для кожного HTTP-запиту. Після завершення запиту цей екземпляр видаляється, що дозволяє забезпечити ізоляцію даних і ресурсів між різними запитами.
Цей підхід дозволяє легко змінювати залежності за необхідності, налаштовувати тривалість життя залежностей, а також спрощує тестування й підтримку коду, оскільки залежності можуть бути легко замінені на інші реалізації або підробки (mock) під час тестування.


4.1.7	 Забезпечення безпеки даних


Забезпечення безпеки даних у серверному застосунку включає такі аспекти:
–  Хешування паролів користувачів та зберігання їх у зашифрованому вигляді в базі даних.
–  Використання фреймворку Dapper, що запобігає SQL-ін'єкціям, завдяки параметризованим запитам.
–  Упровадження аутентифікації та авторизації користувачів за допомогою токена JWT (JSON Web Token). Це гарантує, що кожен користувач має доступ лише до тієї інформації, яка необхідна для його роботи.

ВИСНОВКИ


У результаті виконання курсового проєкту значно покращено навички в розробці складних програмних систем. Проєктування та реалізація системи для моніторингу діяльності учнів та працівників навчального закладу, що включає сканування відбитків пальців і вимірювання температури, стали важливими етапами цього процесу.

Розроблена система є комплексним рішенням для навчальних установ, яке дозволяє користувачам переглядати інформацію про зайнятість приміщень, відстежувати історію відвідувань та пропонувати нові ідеї і події. Архітектурне рішення включає серверну і клієнтську частину.

Проєкт використовує тришарову архітектуру [1], шаблони проєктування [2], принципи якісного коду [3] та оптимальної архітектури [4]. Було проведено детальний аналіз предметної області, проєктування бази даних та розробку програмного забезпечення відповідно до сучасних стандартів. Функціональне тестування основних сценаріїв системи підтвердило її працездатність [5]. Код програми доступний у публічному репозиторії системи контролю версій [6].
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

1.	Мартін Р. Ефективна архітектура програмного забезпечення. К. Віват, 2019, с. 45.
2.	Фаулер М. Шаблони проектування програмних систем. К. Видавництво «Диалектика», 2015, с. 78.
3.	Мартін Р. Якісний код: Основи програмування. К. Віват, 2014, с. 112.
4.	Стивенсон Д. Архітектурні принципи програмного забезпечення. Х. Віват, 2020, с. 90.
5.	Канер С., Фолк Д. Основи функціонального тестування. К. Видавництво «Пітер», 2005, с. 135.
6.	Офіційна документація GitHub. Доступно на: https://docs.github.com/ (дата звернення: 10.08.2024).



ДОДАТОК А
UML-діаграма прецедентів


 
Рисунок А.1 – UML діаграма прецедентів Back-End частини системи «MusicSchool»


ДОДАТОК Б
UML-діаграма розгортання


 
Рисунок Б.1 – UML діаграма розгортання


ДОДАТОК В
ER-діаграма


 
Рисунок В.1 – ER-діаграма БД


ДОДАТОК Г
UML-діаграма пакетів


 
Рисунок Г.1 – UML-діаграма пакетів серверного частини проєкту

Додаток Д
Скрипти свторення бази даних


CREATE DATABASE MusicSchoolDB;
GO

USE SchoolDB;
GO

CREATE TABLE [User] (
    UserId INT PRIMARY KEY IDENTITY(1,1),
    Login NVARCHAR(50) NOT NULL,
    Password NVARCHAR(100) NOT NULL
);
GO

CREATE TABLE Subject (
    SubjectId INT PRIMARY KEY IDENTITY(1,1),
    SubjectName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(255)
);
GO

CREATE TABLE [Class] (
    ClassId INT PRIMARY KEY IDENTITY(1,1),
    ClassName NVARCHAR(100) NOT NULL
);
GO

CREATE TABLE Student (
    StudentId INT PRIMARY KEY IDENTITY(1,1),
    StudentName NVARCHAR(100) NOT NULL,
    StudentAge INT NOT NULL,
    ClassId INT NOT NULL,
    UserId INT NOT NULL,
    FOREIGN KEY (ClassId) REFERENCES [Class](ClassId),
    FOREIGN KEY (UserId) REFERENCES [User](UserId)
);
GO

CREATE TABLE Grade (
    GradeId INT PRIMARY KEY IDENTITY(1,1),
    StudentId INT NOT NULL,
    SubjectId INT NOT NULL,
    GradeValue INT NOT NULL,
    DateTime DATETIME NOT NULL,
    FOREIGN KEY (StudentId) REFERENCES Student(StudentId),
    FOREIGN KEY (SubjectId) REFERENCES Subject(SubjectId)
);
GO

CREATE TABLE Teacher (
    TeacherId INT PRIMARY KEY IDENTITY(1,1),
    TeacherName NVARCHAR(100) NOT NULL,
    ClassId INT NOT NULL,
    UserId INT NOT NULL,
    FOREIGN KEY (ClassId) REFERENCES [Class](ClassId),
    FOREIGN KEY (UserId) REFERENCES [User](UserId)
);
Додаток Е
Код AuthService

public class AuthService : IAuthService
    {
        private readonly ApplicationDbContext _dbContext;
        private readonly IConfiguration _configuration;
        public AuthService(ApplicationDbContext dbContext, IConfiguration configuration)
        {
            _dbContext = dbContext;
            _configuration = configuration;
        }

        public async Task<User> Login(string email, string password)
        {
            User? user = await _dbContext.Users.FindAsync(email);

            if (user == null || password != user.Password)
            {
                return null;
            }

            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["JWT:SecretKey"]);

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim(ClaimTypes.Name, user.UserName),
                    new Claim(ClaimTypes.GivenName, user.Name),
                    new Claim(ClaimTypes.Role, user.Role)
                }),
                IssuedAt = DateTime.UtcNow,
                Issuer = _configuration["JWT:Issuer"],
                Audience = _configuration["JWT:Audience"],
                Expires = DateTime.UtcNow.AddMinutes(30),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature),
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            user.Token = tokenHandler.WriteToken(token);
            user.IsActive = true;

            return user;
        }

        public async Task<User> Register(User user)
        {
            user.Password = BCrypt.HashPassword(user.Password);
            _dbContext.Users.Add(user);
            await _dbContext.SaveChangesAsync();
            
            return user;
        }
    }

Додаток Є
Код Grades.CreateModel


public class CreateModel : PageModel
{
    private readonly GradeRepository _gradeRepository;
    private readonly StudentRepository _studentRepository;
    private readonly SubjectRepository _subjectRepository;

    public CreateModel(GradeRepository gradeRepository, StudentRepository studentRepository, SubjectRepository subjectRepository)
    {
        _gradeRepository = gradeRepository;
        _studentRepository = studentRepository;
        _subjectRepository = subjectRepository;
    }

    [BindProperty]
    public Grade Grade { get; set; }
    public SelectList Students { get; set; }
    public SelectList Subjects { get; set; }

    public async Task OnGetAsync()
    {
        var students = await _studentRepository.GetStudentsAsync();
        var subjects = await _subjectRepository.GetSubjectsAsync();

        Students = new SelectList(students, "StudentId", "StudentName", Grade?.StudentId ?? students.FirstOrDefault()?.StudentId ?? 0);
        Subjects = new SelectList(subjects, "SubjectId", "SubjectName", Grade?.SubjectId ?? subjects.FirstOrDefault()?.SubjectId ?? 0);
    }

    public async Task<IActionResult> OnPostAsync()
    {
        if (Grade.StudentId == 0 || Grade.SubjectId == 0)
        {
            var students = await _studentRepository.GetStudentsAsync();
            var subjects = await _subjectRepository.GetSubjectsAsync();

            Students = new SelectList(students, "StudentId", "StudentName", Grade?.StudentId ?? students.FirstOrDefault()?.StudentId ?? 0);
            Subjects = new SelectList(subjects, "SubjectId", "SubjectName", Grade?.SubjectId ?? subjects.FirstOrDefault()?.SubjectId ?? 0);

            return Page();
        }

        await _gradeRepository.AddGradeAsync(Grade);

        return RedirectToPage("Index");
    }
}
 
Додаток Ж
Перевірка на плагіат


